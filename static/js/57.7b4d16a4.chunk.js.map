{"version":3,"file":"static/js/57.7b4d16a4.chunk.js","mappings":"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","sources":["../node_modules/viem/errors/ccip.ts","../node_modules/viem/utils/ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  OffchainLookupResponseMalformedError,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport { HttpRequestError } from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = ErrorType\n\nexport async function offchainLookup<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  })\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  const { ccipRead } = client\n  const ccipRequest_ =\n    ccipRead && typeof ccipRead?.request === 'function'\n      ? ccipRead.request\n      : ccipRequest\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipRequest_({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipRequestParameters = {\n  data: Hex\n  sender: Address\n  urls: readonly string[]\n}\n\nexport type CcipRequestReturnType = Hex\n\nexport type CcipRequestErrorType = ErrorType\n\nexport async function ccipRequest({\n  data,\n  sender,\n  urls,\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result: any\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n"],"names":["OffchainLookupError","BaseError","constructor","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","getUrl","flat","Object","defineProperty","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","ccipRead","ccipRequest_","request","ccipRequest","isAddressEqual","data_","call","concat","encodeAbiParameters","err","error","Error","i","method","includes","body","undefined","response","fetch","replace","JSON","headers","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}